Index: internal/mutorere/cli.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package mutorere\n\nimport (\n\t\"errors\"\n\t\"fmt\"\n\t\"math\"\n\t\"os\"\n\t\"strings\"\n\n\t\"github.com/inancgumus/screen\"\n\t\"github.com/manifoldco/promptui\"\n)\n\nfunc ModeSelection() {\n\n\tclear()\n\n\tprompt := promptui.Select{\n\t\tLabel: \"Select mode\",\n\t\tItems: []string{\"Train AI\", \"Challenge AI\", \"Challenge HumanAgent\", \"Rules\", \"Quit\"},\n\t}\n\n\t_, mode, err := prompt.Run()\n\n\tif err != nil {\n\t\tfmt.Printf(\"Prompt failed %v\\n\", err)\n\t\tos.Exit(1)\n\t}\n\n\tswitch mode {\n\tcase \"Train AI\":\n\t\ttrainArtificialIntelligence()\n\tcase \"Challenge AI\":\n\t\tchallengeArtificialIntelligence()\n\tcase \"Challenge HumanAgent\":\n\t\tchallengeHuman()\n\tcase \"Rules\":\n\t\tshowRules()\n\tcase \"Quit\":\n\t\tquit()\n\tdefault:\n\t\tos.Exit(1)\n\t}\n}\n\nfunc trainArtificialIntelligence() {\n\n\tvalidate := func(input string) error {\n\t\tif len(input) < 3 {\n\t\t\treturn errors.New(\"you should specify a larger number for best results\")\n\t\t}\n\t\tif ConvertStringToInteger(input) == -1 {\n\t\t\treturn errors.New(\"you should specify a number\")\n\t\t}\n\t\treturn nil\n\t}\n\n\tprompt := promptui.Prompt{\n\t\tLabel:    \"Number of games\",\n\t\tValidate: validate,\n\t\tDefault:  \"10000\",\n\t}\n\n\tresult, err := prompt.Run()\n\n\tif err != nil {\n\t\tfmt.Printf(\"Prompt failed %v\\n\", err)\n\t\treturn\n\t}\n\n\t// Create the game\n\tvar game Game\n\tgame.CreateNewGame(AiVersusAi)\n\n\ttotal := ConvertStringToInteger(result)\n\tvar pointer int\n\tpointer = 0\n\tvar winrate []int\n\tvar epsilons []float64\n\tvar turns []int\n\n\t// Launch \"total\" games\n\tfor i := 0; i < total; i++ {\n\n\t\tpointer = game.Start(pointer, true)\n\t\twinrate = append(winrate, game.GetWinner())\n\t\tturns = append(turns, game.turn)\n\t\tepsilons = append(epsilons, game.firstPlayer.epsilon)\n\t\tgame.firstPlayer.epsilon = math.Max(game.firstPlayer.epsilon, 0.05)\n\t}\n\tPlotEpsilonEvolution(epsilons)\n\tPlotEfficiency(winrate, turns)\n}\n\nfunc challengeArtificialIntelligence() {\n\n\tprompt := promptui.Select{\n\t\tLabel: \"Select AI level\",\n\t\tItems: []string{\"Easy\", \"Medium\", \"Hard\"},\n\t}\n\n\t_, level, err := prompt.Run()\n\n\tif err != nil {\n\t\tfmt.Printf(\"Prompt failed %v\\n\", err)\n\t\tos.Exit(1)\n\t}\n\n\tfmt.Print(level)\n\tvar n int\n\n\tswitch level {\n\tcase \"Easy\":\n\t\tn = 100\n\tcase \"Medium\":\n\t\tn = 1000\n\tcase \"Hard\":\n\t\tn = 10000\n\tdefault:\n\t\tn = 1000\n\t}\n\n\t// Train the algorithm\n\tvar training Game\n\ttraining.CreateNewGame(AiVersusAi)\n\tvar pointer int\n\tpointer = 0\n\tfor i := 0; i < n; i++ {\n\t\tpointer = training.Start(pointer, true)\n\t\ttraining.firstPlayer.epsilon = math.Max(training.firstPlayer.epsilon, 0.05)\n\t}\n\n\t// Play against human\n\tvar game Game\n\tgame.secondPlayer = training.firstPlayer\n\tgame.secondPlayer.epsilon = 0.05\n\tgame.CreateNewGame(HumanVersusAi)\n\tpointer = game.Start(pointer, false)\n}\n\nfunc challengeHuman() {\n\tvar game Game\n\tgame.CreateNewGame(HumanVersusHuman)\n\n\tgame.Start(0, false)\n}\n\nfunc showRules() {\n\n\tfmt.Println(\"RULES\")\n\tfmt.Println(\"\")\n\tfmt.Println(\"Le Mu torere est un jeu traditionnel des Maoris de la côte est de l'Ile du Nord.\")\n\tfmt.Println(\"\")\n\tfmt.Println(\"C'est un jeu opposant deux joueurs, représentés par des pions noirs et blancs autour d'un plateau\")\n\tfmt.Println(\"en forme d'étoile à 8 branches. Le but est de bloquer les pions de son adversaire.\")\n\tfmt.Println(\"Chaque joueur déplace alternativement l'un de ses pions vers une intersection vide adjacente ;\")\n\tfmt.Println(\"il n'est possible de déplacer au centre qu'un pion qui est adjacent à un pion de l'adversaire.\")\n\tfmt.Println(\"Le vainqueur est celui qui prive son adversaire de coups légaux.\")\n\n\tquit()\n}\n\nfunc Help() bool {\n\tprompt := promptui.Prompt{\n\t\tLabel:     \"Show help\",\n\t\tIsConfirm: true,\n\t}\n\n\tconfirm, _ := prompt.Run()\n\n\tswitch strings.ToLower(confirm) {\n\tcase \"y\", \"yes\":\n\t\treturn true\n\tcase \"n\", \"no\", \"\":\n\t\treturn false\n\tdefault:\n\t\treturn false\n\t}\n}\n\nfunc quit() {\n\n\tprompt := promptui.Prompt{\n\t\tLabel:     \"Exit program\",\n\t\tIsConfirm: true,\n\t}\n\n\tconfirm, _ := prompt.Run()\n\n\tswitch strings.ToLower(confirm) {\n\tcase \"y\", \"yes\":\n\t\tos.Exit(0)\n\tcase \"n\", \"no\", \"\":\n\t\tModeSelection()\n\tdefault:\n\t\tquit()\n\t}\n}\n\nfunc clear() {\n\tscreen.Clear()\n\tscreen.MoveTopLeft()\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/internal/mutorere/cli.go b/internal/mutorere/cli.go
--- a/internal/mutorere/cli.go	(revision 554b33515d3edfa89781a3b30f15a56892e8b713)
+++ b/internal/mutorere/cli.go	(date 1639394511912)
@@ -86,7 +86,7 @@
 		winrate = append(winrate, game.GetWinner())
 		turns = append(turns, game.turn)
 		epsilons = append(epsilons, game.firstPlayer.epsilon)
-		game.firstPlayer.epsilon = math.Max(game.firstPlayer.epsilon, 0.05)
+		game.firstPlayer.epsilon = math.Max(game.firstPlayer.epsilon*0.096, 0.05)
 	}
 	PlotEpsilonEvolution(epsilons)
 	PlotEfficiency(winrate, turns)
